name: Deploy QA
on:
  push:
    branches: ["release"]
  pull_request:
    branches: ["release"]
  workflow_dispatch:
jobs:
  Build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Install Maven
        run: sudo apt-get install -y maven
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven
      - name: Build with Maven
        env:
          DATASOURCE_PASSWORD: ${{ secrets.QA_DATASOURCE_PASSWORD }}
          DATASOURCE_URL: ${{ secrets.QA_DATASOURCE_URL }}
          DATASOURCE_USERNAME: ${{ secrets.QA_DATASOURCE_USERNAME }}
          GOOGLE_ADMIN_CONFIG_TYPE: ${{ secrets.GOOGLE_ADMIN_CONFIG_TYPE }}
          GOOGLE_ADMIN_CONFIG_PROJECT_ID: ${{ secrets.GOOGLE_ADMIN_CONFIG_PROJECT_ID }}
          GOOGLE_ADMIN_CONFIG_PRIVATE_KEY: ${{ secrets.GOOGLE_ADMIN_CONFIG_PRIVATE_KEY }}
          GOOGLE_ADMIN_CONFIG_PRIVATE_KEY_ID: ${{ secrets.GOOGLE_ADMIN_CONFIG_PRIVATE_KEY_ID }}
          GOOGLE_ADMIN_CONFIG_CLIENT_EMAIL: ${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_EMAIL }}
          GOOGLE_ADMIN_CONFIG_CLIENT_ID: ${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_ID }}
          GOOGLE_ADMIN_CONFIG_CLIENT_X509_CERT_URL: ${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_X509_CERT_URL }}
        run: mvn clean install

  deploy:
    name: Deploy on QA
    runs-on: self-hosted
    needs: Build
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.QA_HOST }}
          username: ${{ secrets.HOSTS_USERNAME }}
          key: ${{ secrets.QA_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd AllConnected/users-service
            echo "Fetching latest code..."
            git fetch
            git checkout release
            git pull
            echo "Building Docker image..."
            docker build -t users-service .
            echo "Creating .env file..."
            echo "DATASOURCE_URL=${{ secrets.QA_DATASOURCE_URL }}" >> .env
            echo "DATASOURCE_USERNAME=${{ secrets.QA_DATASOURCE_USERNAME }}" >> .env
            echo "DATASOURCE_PASSWORD=${{ secrets.QA_DATASOURCE_PASSWORD }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_TYPE=${{ secrets.GOOGLE_ADMIN_CONFIG_TYPE }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_PROJECT_ID=${{ secrets.GOOGLE_ADMIN_CONFIG_PROJECT_ID }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_PRIVATE_KEY=${{ secrets.GOOGLE_ADMIN_CONFIG_PRIVATE_KEY }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_PRIVATE_KEY_ID=${{ secrets.GOOGLE_ADMIN_CONFIG_PRIVATE_KEY_ID }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_CLIENT_EMAIL=${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_EMAIL }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_CLIENT_ID=${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_ID }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_X509_CERT_URL=${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_X509_CERT_URL }}" >> .env
            docker rm -f users-service
            docker run --name users-service -d -p 8080:8080 --env-file .env users-service
            echo "Docker container running..."
            rm .env