# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy Develop
on:
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]
  workflow_dispatch:
jobs:
  deploy:
    name: Run Pull
    runs-on: self-hosted
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.HOSTS_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd AllConnected/users-service
            echo "Fetching latest code..."
            git fetch
            git checkout develop
            git pull
            echo "Building Docker image..."
            sudo docker build -t users-service .
            echo "Creating .env file..."
            echo "DATASOURCE_URL=${{ secrets.DATASOURCE_URL }}" >> .env
            echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}" >> .env
            echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_TYPE=${{ secrets.GOOGLE_ADMIN_CONFIG_TYPE }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_PROJECT_ID=${{ secrets.GOOGLE_ADMIN_CONFIG_PROJECT_ID }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_PRIVATE_KEY=\"${{ secrets.GOOGLE_ADMIN_CONFIG_PRIVATE_KEY }}\"" >> .env
            echo "GOOGLE_ADMIN_CONFIG_PRIVATE_KEY_ID=${{ secrets.GOOGLE_ADMIN_CONFIG_PRIVATE_KEY_ID }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_CLIENT_EMAIL=${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_EMAIL }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_CLIENT_ID=${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_ID }}" >> .env
            echo "GOOGLE_ADMIN_CONFIG_X509_CERT_URL=${{ secrets.GOOGLE_ADMIN_CONFIG_CLIENT_X509_CERT_URL }}" >> .env
            sudo docker run -d -p 8080:8080 --env-file .env users-service
            echo "Docker container running..."
            